1 МОДЕЛЮВАННЯ ПРОГРАМНОЇ СИСТЕМИ
1.1 Мета роботи


Метою даної лабораторної роботи є розробка програмного забезпечення для SmartDevice пристрою для програмної інформаційної системи для управління закладами харчування «LightServe»; наведення опису прийнятих інженерних рішень; представлення загальної архітектури системи; побудова діаграм.


1.2 Моделювання програмної системи


Для аналізу та розуміння функціональних можливостей розумної лампи було створено діаграму прецедентів (див. рис. А.1). Ця діаграма дозволяє краще уявити, як саме розумна лампа може бути використана працівником закладу харчування. Основна функціональність полягає у зміні статусу замовлення, що має відображатися через зміну кольору лампи. Наприклад, якщо замовлення готове до видачі, лампа світить зеленим, щоб інформувати клієнтів. У протилежному випадку, коли замовлення ще не готове, лампа світить червоним. Діаграма прецедентів зображує відношення між акторами та прецедентами системи.
Розгляньмо UML діаграму діяльності (див. рис. А.2), яка надає подробиці щодо конкретних дій, які відбуваються як на пристрої, так і на серверній частині під час виконання певних функцій. Вона допомагає розібратися в тому, як саме пристрої взаємодіють між собою та які кроки необхідно виконати для коректної роботи системи.
Додатково до попередніх діаграм було підготовлено діаграму станів (див. рис. А.3), що відображає різні стани, у яких може перебувати розумна лампа та переходи між цими станами в залежності від зовнішніх подій. Ця діаграма важлива для розуміння роботи лампи на рівні її внутрішньої логіки та алгоритмів.


1.3 Взаємодія між частинами системи


Взаємодія програмного забезпечення з іншими частинами системи буде відбуватися через серверну частину, до якої було додано додаткові методи: отримання повної інформації про замовлення, а також зміна статусу готовності замовлення працівником закладу харчування. 
В якості прикладу взаємодії було створено діаграму взаємодії на основі діаграми активності (див. рис. А.4). Ця діаграма детально описує послідовність дій, які відбуваються під час взаємодії пристрою з Wi-Fi та сервером. Після успішного підключення до мережі, пристрій отримує дані про статус замовлення з сервера, які впливають на колір лампи.

 
2 ПРОГРАМНА РЕАЛІЗАЦІЯ
2.1 Архітектура програмної системи


Було використано мову  програмування С++, а також віртуальне середовище Wokwi для написання програмного забезпечення для IoT-пристрою. Для емуляції реальної системи використовувався мікроконтролер Arduino ESP32, який має можливість підключення до мережі і доступу до Інтернету, що є необхідним для взаємодії з серверною частиною.
У програмі використовуються HTTP-запити для обміну даними з сервером, а також бібліотека ArduinoJson для обробки відповідей від сервера.


2.2 Програмна розробка системи


Перед тим як розпочати написання програмного коду, було створено схему для фізичного розміщення компонентів системи: мікроконтролера та двох світлодіодів (див. рис. А5).
Мікроконтролер ESP32 виступає як центральний керуючий пристрій. Він відповідає за виконання програмного коду та управління всією системою. Поодинокі світлодіоди використовуються для візуального відображення стану системи. Червоний світлодіод сигналізує про неготовність замовлення, тоді як зелений – про його готовність. Додатково, у схемі присутні два резистори, які служать для обмеження потоку струму, що подається до світлодіодів. Це необхідно для захисту світлодіодів від можливого перевищення струму, що може спричинити їх пошкодження.
Принцип роботи полягає у тому, що мікроконтролер ESP32 керує роботою світлодіодів через резистори. Залежно від вимог програми, він може вмикати або вимикати світлодіоди. Наприклад, якщо програма вказує на неготовність замовлення, ESP32 активує червоний світлодіод для відображення цього стану, а якщо замовлення готове, то активує зелений світлодіод. Після створення схеми починається написання програмного коду. Спочатку оголошуються глобальні змінні, які повинні бути доступні в усіх частинах програми. Це змінні, які визначають ім'я та пароль мережі Wi-Fi; константа, яка визначає частоту виконання певної дії; змінна, яка зберігає час в мілісекундах з моменту останнього виконання дії. Також є змінні, які вказують на номери пінів мікроконтролера ESP32, до яких підключені світлодіоди зеленого та червоного кольорів відповідно.
В методі setup() відбувається налаштування системи. Встановлюється з'єднання з мережею Wi-Fi за допомогою введених раніше ім'я мережі та паролю. Потім відбувається очікування підключення до мережі, під час якого виводиться символ "." на монітор серійного порту кожні 100 мілісекунд. Після успішного підключення виводиться повідомлення «WiFi Connected!» разом з локальною IP-адресою мікроконтролера. На останньому кроці встановлюється режим виводу для пінів, до яких підключені світлодіоди (див. рядки 11 – 12).
1 void setup(){
2 	Serial.begin(115200);
3  	WiFi.begin(ssid, pass);
4  	while(WiFi.status() != WL_CONNECTED){
5    		delay(100);
6    		Serial.println(".");
7  	}
8  	Serial.println("WiFi Connected!");
9  	Serial.println(WiFi.localIP());
10
11  	pinMode(greenLedPin, OUTPUT);
12  	pinMode(redLedPin, OUTPUT);
13 }
У функції loop() виконується кілька дій. Спочатку визначається поточний час у мілісекундах (див. Б.1 рядок 3). Потім проводиться порівняння з попереднім часом, щоб визначити, чи минув певний інтервал часу. Якщо це так, виконується HTTP-запит до веб-сервера за допомогою методу GET (див. Б.1 рядки 7 – 9). Отримана відповідь аналізується, і з неї витягується значення властивості «isDone» (див. Б.1 рядок 15). Залежно від цього значення керується станом світлодіодів (див. Б.1 рядки 17 – 26). Якщо замовлення завершено, вмикається зелений світлодіод (див. Б.1 рядки 19 – 20), в іншому випадку – червоний (див. Б.1 рядки 24 – 25). У разі помилки виконання HTTP-запиту виводиться відповідне повідомлення (див. Б.1 рядки 28 – 31). На останньому кроці з'єднання з веб-сервером завершується.


3 ВИСНОВКИ


Впродовж цієї лабораторної роботи було розроблено програмне забезпечення для SmartDevice пристрою для програмної інформаційної системи для управління закладами харчування «LightServe»; наведено опису прийнятих інженерних рішень; представлено схему загальної архітектури системи; побудовано діаграми.
Посилання на програмний код: https://github.com/NurePashnovaAnastasiia/apz-pzpi-21-2-pashnova-anastasiia/tree/main/Task3
Посилання на проєкт у симуляторі Wokwi: https://wokwi.com/projects/396082703140468737
