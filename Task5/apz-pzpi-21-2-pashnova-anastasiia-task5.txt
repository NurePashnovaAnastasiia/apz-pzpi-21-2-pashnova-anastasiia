1 МОДЕЛЮВАННЯ ПРОГРАМНОЇ СИСТЕМИ
1.1	Мета роботи


Метою даної лабораторної роботи є розробка мобільного програмного застосунку для програмної інформаційної системи закладами харчування «LightServe»; наведення опису прийнятих інженерних рішень; представлення загальної архітектури та будови мобільного застосунку та його взаємодія з серверною частиною; побудова діаграм.


1.2	Моделювання програмної системи


Аби почати створювати мобільний застосунок для програмної інформаційної системи для управління закладами харчування «LightServe», варто провести аналіз предметної області. Отже, за допомогою програмної інформаційної системи «LightServe», користувачі, а саме робітник зможе авторизуватись за допомогою нікнейму та паролю, який надасть йому адміністратор і в подальшому змінити цей пароль, переглядати список столиків в закладі харчування, змінювати їм статус на доступний або не доступний, аби в подальшому відвідувачі закладу харчування могли це відстежувати через веб застосунок, переглядати всі замовлення які надходять від відвідувачів та змінювати їм статус готовності, тим самим керуючи розумною лампою, а також переглядати деталі конкретного замовлення.
Відповідно до наведеного вище аналізу, було створено діаграму прецедентів для користувача: робітника закладу харчування (див. рис. А.1). 


1.3	Взаємодія між частинами системи


Мобільний застосунок буде взаємодіяти з серверною частиною програмної системи за допомогою запитів HTTP. Запити HTTP, які буде надсилати клієнт, включатимуть різноманітні дії, такі як отримання інформації, надсилання даних для обробки чи виконання конкретного завдання. Було створено діаграму компонентів (див. рис А.2), аби краще зрозуміти архітектурну структуру та взаємозв'язок між різними компонентами програмної системи. На діаграмі компонентів будуть відображені основні модулі, які складають мобільний застосунок системи, а також їхні взаємодії.


2	ПРОГРАМНА РЕАЛІЗАЦІЯ КЛІЄНТСЬКОЇ ЧАСТИНИ
2.1	Архітектура мобільного застосунку


Мобільний застосунок був розроблений на мові програмування C# з використанням технології розробки .NET MAUI. У цій архітектурі моделі представлені класами, які раніше використовувалися у серверній частині, такі як класи об'єктів (заклад харчування, відвідувач, страва, меню, замовлення, деталі замовлення, власник, столик, робітник).
В якості представлення (View) використовуються стандартні XAML-файли. Основна логіка та взаємодія з сервером знаходиться у файлах з розширенням .xaml.cs. Для кожної сторінки створено окремі файли.
Система підтримує локалізацію англійською та українською мовами. Для цього було створено два файли ресурсів, які містять текст у вигляді ключ-значення для використання відповідного мовного варіанту.
Також було створено ще одну діаграму, а саме діаграму станів для користувача програмної інформаційної системи «LightServe» (див. рис. А.3). Ця діаграма визначає можливі стани системи, події, що можуть спричинити переходи між цими станами, і дії, які відбуваються в кожному стані.
Також було створено діаграму діяльностей для авторизації та роботи користувача у системі (див. рис. А.4), яка візуально відображає послідовність операцій та взаємодію між різними етапами процесу аутентифікації та використання функціоналу системи.


2.2	Програмна розробка системи


Розглянемо реалізацію деяких моментів у функціональності серверної частини. 
Метод ChangeOrderStatus відповідає за зміну статусу замовлення на основі взаємодії користувача з інтерфейсом. Метод викликається, коли натискається кнопка, і приймає об'єкт sender та параметри події EventArgs. Спочатку відбувається отримання кнопки, яка викликала подію, та зв'язане з нею замовлення (див. рис Б.1 рядки 3-4). Потім, у межах блоку try, створюється об'єкт HttpClient, який дозволяє здійснити HTTP-запит до сервера (див. рис. Б.1 рядок 7). Вказується базова адреса сервера, до якого будуть відправлені HTTP-запити (див. рис. Б.1 рядок 8).
Здійснюється асинхронний POST-запит до вказаного API для зміни статусу замовлення на основі його ідентифікатора. Новий статус визначається шляхом інверсії поточного статусу (див. рис Б.1 рядки 10 – 11). Далі йде перевірка, чи запит був виконаний успішно (див. рис Б.1 рядки 13 – 21). Якщо запит успішний, статус відповідного замовлення в колекції оновлюється, після чого колекція прив'язується до інтерфейсу користувача для оновлення відображення (див. рис Б.1 рядки 15 – 19). Якщо запит не успішний, відображається повідомлення про помилку із зазначенням причини невдачі (див. рис Б.1 рядки 20 – 21). У разі виникнення будь-яких виключень у процесі виконання запиту, вони обробляються у блоці catch, і користувач отримує повідомлення з деталями помилки (див. рис Б.1 рядки 23 – 25).
Метод OnChangeClicked відповідає за зміну пароля користувача при натисканні кнопки. Метод приймає параметри sender та EventArgs, які використовуються для обробки події натискання (див. рис Б.1 рядок 2).
Спочатку зчитуються старий та новий паролі з відповідних текстових полів OldPassoword і NewPasswordEntry (див. рис Б.1 рядки 3 – 4). Далі перевіряється, чи не є ці поля порожніми або складаються з пробілів. Якщо обидва поля містять дані, створюється об'єкт WorkerMobileDto, який включає ім'я користувача, старий пароль та новий пароль (див. рис Б.1 рядки 6 – 11). Далі  створюється об'єкт HttpClient для здійснення HTTP-запиту до сервера (див. рис Б.1 рядок 13). Вказується базова адреса сервера і встановлюються заголовки запиту, щоб приймати відповіді у форматі JSON (див. рис Б.1 рядки 14 – 16). Здійснюється асинхронний PUT-запит до вказаного API для зміни пароля користувача, передаючи об'єкт workerDto як дані запиту (див. рис Б.1 рядок 18). Далі йде перевірка, чи запит був виконаний успішно (див. рис Б.1 рядки 20 – 25). Якщо запит успішний, відображається повідомлення про успішну зміну пароля і здійснюється повернення до попередньої сторінки навігації (див. рис Б.1 рядки 21 – 23). Якщо запит не успішний, відображається повідомлення про помилку з інформацією про те, що робітника не знайдено (див. рис Б.1 рядок 25).


ВИСНОВКИ
Впродовж цієї лабораторної роботи було розроблено мобільний застосунок для програмної інформаційної системи закладами харчування «LightServe»; наведено описи прийнятих інженерних рішень; представлено загальну архітектуру та будову мобільного застосунку та його взаємодія з серверною частиною; побудовано діаграми.
Посилання на програмний код: https://github.com/NurePashnovaAnastasiia/apz-pzpi-21-2-pashnova-anastasiia/tree/main/Task5 
